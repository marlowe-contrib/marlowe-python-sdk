# coding: utf-8

"""
    Marlowe Runtime REST API

    REST API for Marlowe Runtime

    The version of the OpenAPI document: 0.0.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from openapi_client.models.bound import Bound
from openapi_client.models.choice_id import ChoiceId

class ChoiceActionObject(BaseModel):
    """
    ChoiceActionObject
    """
    choose_between: conlist(Bound) = Field(...)
    for_choice: ChoiceId = Field(...)
    __properties = ["choose_between", "for_choice"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChoiceActionObject:
        """Create an instance of ChoiceActionObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in choose_between (list)
        _items = []
        if self.choose_between:
            for _item in self.choose_between:
                if _item:
                    _items.append(_item.to_dict())
            _dict['choose_between'] = _items
        # override the default output from pydantic by calling `to_dict()` of for_choice
        if self.for_choice:
            _dict['for_choice'] = self.for_choice.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChoiceActionObject:
        """Create an instance of ChoiceActionObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChoiceActionObject.parse_obj(obj)

        _obj = ChoiceActionObject.parse_obj({
            "choose_between": [Bound.from_dict(_item) for _item in obj.get("choose_between")] if obj.get("choose_between") is not None else None,
            "for_choice": ChoiceId.from_dict(obj.get("for_choice")) if obj.get("for_choice") is not None else None
        })
        return _obj


