# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, ValidationError, validator
from openapi_client.models.value_one_of import ValueOneOf
from openapi_client.models.value_one_of6 import ValueOneOf6
from openapi_client.models.value_one_of7 import ValueOneOf7
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

VALUE_ONE_OF_SCHEMAS = ["ValueOneOf", "ValueOneOf1", "ValueOneOf2", "ValueOneOf3", "ValueOneOf4", "ValueOneOf5", "ValueOneOf6", "ValueOneOf7", "ValueOneOf8", "int", "str"]

class Value(BaseModel):
    """
    A time-varying expression that evaluates to a boolean
    """
    # data type: ValueOneOf
    oneof_schema_1_validator: Optional[ValueOneOf] = None
    # data type: int
    oneof_schema_2_validator: Optional[StrictInt] = None
    # data type: ValueOneOf1
    oneof_schema_3_validator: Optional[ValueOneOf1] = None
    # data type: ValueOneOf2
    oneof_schema_4_validator: Optional[ValueOneOf2] = None
    # data type: ValueOneOf3
    oneof_schema_5_validator: Optional[ValueOneOf3] = None
    # data type: ValueOneOf4
    oneof_schema_6_validator: Optional[ValueOneOf4] = None
    # data type: ValueOneOf5
    oneof_schema_7_validator: Optional[ValueOneOf5] = None
    # data type: ValueOneOf6
    oneof_schema_8_validator: Optional[ValueOneOf6] = None
    # data type: str
    oneof_schema_9_validator: Optional[StrictStr] = None
    # data type: ValueOneOf7
    oneof_schema_10_validator: Optional[ValueOneOf7] = None
    # data type: ValueOneOf8
    oneof_schema_11_validator: Optional[ValueOneOf8] = None
    if TYPE_CHECKING:
        actual_instance: Union[ValueOneOf, ValueOneOf1, ValueOneOf2, ValueOneOf3, ValueOneOf4, ValueOneOf5, ValueOneOf6, ValueOneOf7, ValueOneOf8, int, str]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(VALUE_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = Value.construct()
        error_messages = []
        match = 0
        # validate data type: ValueOneOf
        if not isinstance(v, ValueOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ValueOneOf`")
        else:
            match += 1
        # validate data type: int
        try:
            instance.oneof_schema_2_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: ValueOneOf1
        if not isinstance(v, ValueOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ValueOneOf1`")
        else:
            match += 1
        # validate data type: ValueOneOf2
        if not isinstance(v, ValueOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ValueOneOf2`")
        else:
            match += 1
        # validate data type: ValueOneOf3
        if not isinstance(v, ValueOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ValueOneOf3`")
        else:
            match += 1
        # validate data type: ValueOneOf4
        if not isinstance(v, ValueOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ValueOneOf4`")
        else:
            match += 1
        # validate data type: ValueOneOf5
        if not isinstance(v, ValueOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ValueOneOf5`")
        else:
            match += 1
        # validate data type: ValueOneOf6
        if not isinstance(v, ValueOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ValueOneOf6`")
        else:
            match += 1
        # validate data type: str
        try:
            instance.oneof_schema_9_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: ValueOneOf7
        if not isinstance(v, ValueOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ValueOneOf7`")
        else:
            match += 1
        # validate data type: ValueOneOf8
        if not isinstance(v, ValueOneOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ValueOneOf8`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in Value with oneOf schemas: ValueOneOf, ValueOneOf1, ValueOneOf2, ValueOneOf3, ValueOneOf4, ValueOneOf5, ValueOneOf6, ValueOneOf7, ValueOneOf8, int, str. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in Value with oneOf schemas: ValueOneOf, ValueOneOf1, ValueOneOf2, ValueOneOf3, ValueOneOf4, ValueOneOf5, ValueOneOf6, ValueOneOf7, ValueOneOf8, int, str. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Value:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Value:
        """Returns the object represented by the json string"""
        instance = Value.construct()
        error_messages = []
        match = 0

        # deserialize data into ValueOneOf
        try:
            instance.actual_instance = ValueOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into int
        try:
            # validation
            instance.oneof_schema_2_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_2_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ValueOneOf1
        try:
            instance.actual_instance = ValueOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ValueOneOf2
        try:
            instance.actual_instance = ValueOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ValueOneOf3
        try:
            instance.actual_instance = ValueOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ValueOneOf4
        try:
            instance.actual_instance = ValueOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ValueOneOf5
        try:
            instance.actual_instance = ValueOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ValueOneOf6
        try:
            instance.actual_instance = ValueOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into str
        try:
            # validation
            instance.oneof_schema_9_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_9_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ValueOneOf7
        try:
            instance.actual_instance = ValueOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ValueOneOf8
        try:
            instance.actual_instance = ValueOneOf8.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into Value with oneOf schemas: ValueOneOf, ValueOneOf1, ValueOneOf2, ValueOneOf3, ValueOneOf4, ValueOneOf5, ValueOneOf6, ValueOneOf7, ValueOneOf8, int, str. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Value with oneOf schemas: ValueOneOf, ValueOneOf1, ValueOneOf2, ValueOneOf3, ValueOneOf4, ValueOneOf5, ValueOneOf6, ValueOneOf7, ValueOneOf8, int, str. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

from openapi_client.models.value_one_of1 import ValueOneOf1
from openapi_client.models.value_one_of2 import ValueOneOf2
from openapi_client.models.value_one_of3 import ValueOneOf3
from openapi_client.models.value_one_of4 import ValueOneOf4
from openapi_client.models.value_one_of5 import ValueOneOf5
from openapi_client.models.value_one_of8 import ValueOneOf8
Value.update_forward_refs()

