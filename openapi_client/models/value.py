# coding: utf-8

"""
    Marlowe Runtime REST API

    REST API for Marlowe Runtime

    The version of the OpenAPI document: 0.0.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, ValidationError, validator
from openapi_client.models.time_interval import TimeInterval
from openapi_client.models.token_in_account import TokenInAccount
from openapi_client.models.use_value import UseValue
from openapi_client.models.value_of_choice import ValueOfChoice
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

VALUE_ONE_OF_SCHEMAS = ["Add", "Divide", "IfValue", "Minus", "Multiply", "Negate", "TimeInterval", "TokenInAccount", "UseValue", "ValueOfChoice", "int"]

class Value(BaseModel):
    """
    A time-varying expression that evaluates to a boolean
    """
    # data type: TokenInAccount
    oneof_schema_1_validator: Optional[TokenInAccount] = None
    # data type: int
    oneof_schema_2_validator: Optional[StrictInt] = None
    # data type: Negate
    oneof_schema_3_validator: Optional[Negate] = None
    # data type: Add
    oneof_schema_4_validator: Optional[Add] = None
    # data type: Minus
    oneof_schema_5_validator: Optional[Minus] = None
    # data type: Multiply
    oneof_schema_6_validator: Optional[Multiply] = None
    # data type: Divide
    oneof_schema_7_validator: Optional[Divide] = None
    # data type: ValueOfChoice
    oneof_schema_8_validator: Optional[ValueOfChoice] = None
    # data type: TimeInterval
    oneof_schema_9_validator: Optional[TimeInterval] = None
    # data type: UseValue
    oneof_schema_10_validator: Optional[UseValue] = None
    # data type: IfValue
    oneof_schema_11_validator: Optional[IfValue] = None
    if TYPE_CHECKING:
        actual_instance: Union[Add, Divide, IfValue, Minus, Multiply, Negate, TimeInterval, TokenInAccount, UseValue, ValueOfChoice, int]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(VALUE_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = Value.construct()
        error_messages = []
        match = 0
        # validate data type: TokenInAccount
        if not isinstance(v, TokenInAccount):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TokenInAccount`")
        else:
            match += 1
        # validate data type: int
        try:
            instance.oneof_schema_2_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: Negate
        if not isinstance(v, Negate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Negate`")
        else:
            match += 1
        # validate data type: Add
        if not isinstance(v, Add):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Add`")
        else:
            match += 1
        # validate data type: Minus
        if not isinstance(v, Minus):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Minus`")
        else:
            match += 1
        # validate data type: Multiply
        if not isinstance(v, Multiply):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Multiply`")
        else:
            match += 1
        # validate data type: Divide
        if not isinstance(v, Divide):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Divide`")
        else:
            match += 1
        # validate data type: ValueOfChoice
        if not isinstance(v, ValueOfChoice):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ValueOfChoice`")
        else:
            match += 1
        # validate data type: TimeInterval
        if not isinstance(v, TimeInterval):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TimeInterval`")
        else:
            match += 1
        # validate data type: UseValue
        if not isinstance(v, UseValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UseValue`")
        else:
            match += 1
        # validate data type: IfValue
        if not isinstance(v, IfValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IfValue`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in Value with oneOf schemas: Add, Divide, IfValue, Minus, Multiply, Negate, TimeInterval, TokenInAccount, UseValue, ValueOfChoice, int. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in Value with oneOf schemas: Add, Divide, IfValue, Minus, Multiply, Negate, TimeInterval, TokenInAccount, UseValue, ValueOfChoice, int. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Value:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Value:
        """Returns the object represented by the json string"""
        instance = Value.construct()
        error_messages = []
        match = 0

        # deserialize data into TokenInAccount
        try:
            instance.actual_instance = TokenInAccount.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into int
        try:
            # validation
            instance.oneof_schema_2_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_2_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Negate
        try:
            instance.actual_instance = Negate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Add
        try:
            instance.actual_instance = Add.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Minus
        try:
            instance.actual_instance = Minus.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Multiply
        try:
            instance.actual_instance = Multiply.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Divide
        try:
            instance.actual_instance = Divide.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ValueOfChoice
        try:
            instance.actual_instance = ValueOfChoice.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TimeInterval
        try:
            instance.actual_instance = TimeInterval.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UseValue
        try:
            instance.actual_instance = UseValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IfValue
        try:
            instance.actual_instance = IfValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into Value with oneOf schemas: Add, Divide, IfValue, Minus, Multiply, Negate, TimeInterval, TokenInAccount, UseValue, ValueOfChoice, int. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Value with oneOf schemas: Add, Divide, IfValue, Minus, Multiply, Negate, TimeInterval, TokenInAccount, UseValue, ValueOfChoice, int. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

from openapi_client.models.add import Add
from openapi_client.models.divide import Divide
from openapi_client.models.if_value import IfValue
from openapi_client.models.minus import Minus
from openapi_client.models.multiply import Multiply
from openapi_client.models.negate import Negate
Value.update_forward_refs()

