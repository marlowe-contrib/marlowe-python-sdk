# coding: utf-8

"""
    Marlowe Runtime REST API

    REST API for Marlowe Runtime

    The version of the OpenAPI document: 0.0.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, conlist
from openapi_client.models.marlowe_state_accounts_inner_inner import MarloweStateAccountsInnerInner
from openapi_client.models.marlowe_state_bound_values_inner_inner import MarloweStateBoundValuesInnerInner
from openapi_client.models.marlowe_state_choices_inner_inner import MarloweStateChoicesInnerInner

class MarloweState(BaseModel):
    """
    The on-chain state of a Marlowe contract.  # noqa: E501
    """
    accounts: conlist(conlist(MarloweStateAccountsInnerInner, max_items=2, min_items=2)) = Field(...)
    bound_values: conlist(conlist(MarloweStateBoundValuesInnerInner, max_items=2, min_items=2)) = Field(..., alias="boundValues")
    choices: conlist(conlist(MarloweStateChoicesInnerInner, max_items=2, min_items=2)) = Field(...)
    min_time: StrictInt = Field(..., alias="minTime")
    __properties = ["accounts", "boundValues", "choices", "minTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MarloweState:
        """Create an instance of MarloweState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list of list)
        _items = []
        if self.accounts:
            for _item in self.accounts:
                if _item:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item if _inner_item is not None]
                    )
            _dict['accounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bound_values (list of list)
        _items = []
        if self.bound_values:
            for _item in self.bound_values:
                if _item:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item if _inner_item is not None]
                    )
            _dict['boundValues'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in choices (list of list)
        _items = []
        if self.choices:
            for _item in self.choices:
                if _item:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item if _inner_item is not None]
                    )
            _dict['choices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MarloweState:
        """Create an instance of MarloweState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MarloweState.parse_obj(obj)

        _obj = MarloweState.parse_obj({
            "accounts": [
                    [MarloweStateAccountsInnerInner.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj.get("accounts")
                ] if obj.get("accounts") is not None else None,
            "bound_values": [
                    [MarloweStateBoundValuesInnerInner.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj.get("boundValues")
                ] if obj.get("boundValues") is not None else None,
            "choices": [
                    [MarloweStateChoicesInnerInner.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj.get("choices")
                ] if obj.get("choices") is not None else None,
            "min_time": obj.get("minTime")
        })
        return _obj


