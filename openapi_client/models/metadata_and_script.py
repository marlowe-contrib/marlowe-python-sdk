# coding: utf-8

"""
    Marlowe Runtime REST API

    REST API for Marlowe Runtime

    The version of the OpenAPI document: 0.0.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from openapi_client.models.token_metadata import TokenMetadata

class MetadataAndScript(BaseModel):
    """
    MetadataAndScript
    """
    metadata: Optional[TokenMetadata] = None
    script: StrictStr = Field(..., description="The type of script receiving the role token.")
    __properties = ["metadata", "script"]

    @validator('script')
    def script_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('OpenRole'):
            raise ValueError("must be one of enum values ('OpenRole')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MetadataAndScript:
        """Create an instance of MetadataAndScript from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MetadataAndScript:
        """Create an instance of MetadataAndScript from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MetadataAndScript.parse_obj(obj)

        _obj = MetadataAndScript.parse_obj({
            "metadata": TokenMetadata.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "script": obj.get("script")
        })
        return _obj


