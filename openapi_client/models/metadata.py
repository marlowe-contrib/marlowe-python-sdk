# coding: utf-8

"""
    Marlowe Runtime REST API

    REST API for Marlowe Runtime

    The version of the OpenAPI document: 0.0.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, ValidationError, conlist, constr, validator
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

METADATA_ONE_OF_SCHEMAS = ["Dict[str, Metadata]", "List[Metadata]", "int", "str"]

class Metadata(BaseModel):
    """
    Arbitrary JSON-encoded transaction metadata
    """
    # data type: int
    oneof_schema_1_validator: Optional[StrictInt] = None
    # data type: str
    oneof_schema_3_validator: Optional[str] = Field(None, description="Text data of up to 64 characters")
    # data type: List[Metadata]
    oneof_schema_4_validator: Optional[conlist(Metadata)] = Field(None, description="Array of metadata values")
    # data type: Dict[str, Metadata]
    oneof_schema_5_validator: Optional[Dict[str, Metadata]] = Field(None, description="Object of metadata values")
    if TYPE_CHECKING:
        actual_instance: Union[Dict[str, Metadata], List[Metadata], int, str]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(METADATA_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        """Validate that the value is valid for oneOf schemas"""
        if v is None:
            return v
        
        instance = Metadata.construct()
        error_messages = []
        match = 0
        # validate data type: int
        try:
            instance.oneof_schema_1_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: str
        try:
            # without this if v is an int, it will be converted to a string and pass validation
            if isinstance(v, str):
                instance.oneof_schema_3_validator = v
                match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: List[Metadata]
        try:
            instance.oneof_schema_4_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: Dict[str, Metadata]
        try:
            # without this, if v is an empty string it will be converted to a dict and pass validation
            if isinstance(v, dict):
                instance.oneof_schema_5_validator = v
                match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in Metadata with oneOf schemas: Dict[str, Metadata], List[Metadata], int, str. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in Metadata with oneOf schemas: Dict[str, Metadata], List[Metadata], int, str. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Metadata:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Metadata:
        """Returns the object represented by the json string"""
        try:
            data = json.loads(json_str)
        except json.JSONDecodeError:
            raise ValueError("Invalid JSON string")

        # if data is a primitive type, return the instance
        if isinstance(data, int | str| None):
            return cls(actual_instance=data)
        
        instance = Metadata.construct()
        error_messages = []
        match = 0

        # deserialize data into int
        try:
            # validation
            instance.oneof_schema_1_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_1_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        # deserialize data into str
        try:
            # validation
            instance.oneof_schema_3_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_3_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        # deserialize data into List[Metadata]
        try:
            # validation
            data = json.loads(json_str)
            if isinstance(data, list):
                instance.oneof_schema_4_validator = [cls.from_json(json.dumps(item)) for item in data]
                # assign value to actual_instance
                instance.actual_instance = instance.oneof_schema_4_validator
                match += 1
            else:
                raise ValueError("Data is not a list")
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        # deserialize data into Dict[str,k Metadata]
        try:
            # validation
            data = json.loads(json_str)
            if isinstance(data, dict):
                instance.oneof_schema_5_validator = {k: cls.from_json(json.dumps(v)) for k, v in data.items()}
                # assign value to actual_instance
                instance.actual_instance = instance.oneof_schema_5_validator
                match += 1
            else:
                raise ValueError("Data is not a dictionary")
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into Metadata with oneOf schemas: Dict[str, Metadata], List[Metadata], int, str. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Metadata with oneOf schemas: Dict[str, Metadata], List[Metadata], int, str. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

Metadata.update_forward_refs()

