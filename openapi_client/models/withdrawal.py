# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist, constr, validator
from openapi_client.models.block_header import BlockHeader
from openapi_client.models.payout_header import PayoutHeader
from openapi_client.models.tx_status import TxStatus

class Withdrawal(BaseModel):
    """
    Withdrawal
    """
    block: Optional[BlockHeader] = None
    payouts: conlist(PayoutHeader, unique_items=True) = Field(...)
    status: TxStatus = Field(...)
    withdrawal_id: constr(strict=True) = Field(..., alias="withdrawalId", description="The hex-encoded identifier of a Cardano transaction")
    __properties = ["block", "payouts", "status", "withdrawalId"]

    @validator('withdrawal_id')
    def withdrawal_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-fA-F0-9]{64}$", value):
            raise ValueError(r"must validate the regular expression /^[a-fA-F0-9]{64}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Withdrawal:
        """Create an instance of Withdrawal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of block
        if self.block:
            _dict['block'] = self.block.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payouts (list)
        _items = []
        if self.payouts:
            for _item in self.payouts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['payouts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Withdrawal:
        """Create an instance of Withdrawal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Withdrawal.parse_obj(obj)

        _obj = Withdrawal.parse_obj({
            "block": BlockHeader.from_dict(obj.get("block")) if obj.get("block") is not None else None,
            "payouts": [PayoutHeader.from_dict(_item) for _item in obj.get("payouts")] if obj.get("payouts") is not None else None,
            "status": obj.get("status"),
            "withdrawal_id": obj.get("withdrawalId")
        })
        return _obj


