# coding: utf-8

"""
    Marlowe Runtime REST API

    REST API for Marlowe Runtime

    The version of the OpenAPI document: 0.0.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, ValidationError, validator
from openapi_client.models.label_ref import LabelRef
from openapi_client.models.time_interval import TimeInterval
from openapi_client.models.token_in_account_object import TokenInAccountObject
from openapi_client.models.use_value import UseValue
from openapi_client.models.value_of_choice_object import ValueOfChoiceObject
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

VALUEOBJECT_ONE_OF_SCHEMAS = ["AddObject", "DivideObject", "IfValueObject", "LabelRef", "MinusObject", "MultiplyObject", "NegateObject", "TimeInterval", "TokenInAccountObject", "UseValue", "ValueOfChoiceObject", "int"]

class ValueObject(BaseModel):
    """
    A time-varying expression that evaluates to a boolean
    """
    # data type: TokenInAccountObject
    oneof_schema_1_validator: Optional[TokenInAccountObject] = None
    # data type: int
    oneof_schema_2_validator: Optional[StrictInt] = None
    # data type: NegateObject
    oneof_schema_3_validator: Optional[NegateObject] = None
    # data type: AddObject
    oneof_schema_4_validator: Optional[AddObject] = None
    # data type: MinusObject
    oneof_schema_5_validator: Optional[MinusObject] = None
    # data type: MultiplyObject
    oneof_schema_6_validator: Optional[MultiplyObject] = None
    # data type: DivideObject
    oneof_schema_7_validator: Optional[DivideObject] = None
    # data type: ValueOfChoiceObject
    oneof_schema_8_validator: Optional[ValueOfChoiceObject] = None
    # data type: TimeInterval
    oneof_schema_9_validator: Optional[TimeInterval] = None
    # data type: UseValue
    oneof_schema_10_validator: Optional[UseValue] = None
    # data type: IfValueObject
    oneof_schema_11_validator: Optional[IfValueObject] = None
    # data type: LabelRef
    oneof_schema_12_validator: Optional[LabelRef] = None
    if TYPE_CHECKING:
        actual_instance: Union[AddObject, DivideObject, IfValueObject, LabelRef, MinusObject, MultiplyObject, NegateObject, TimeInterval, TokenInAccountObject, UseValue, ValueOfChoiceObject, int]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(VALUEOBJECT_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ValueObject.construct()
        error_messages = []
        match = 0
        # validate data type: TokenInAccountObject
        if not isinstance(v, TokenInAccountObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TokenInAccountObject`")
        else:
            match += 1
        # validate data type: int
        try:
            instance.oneof_schema_2_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: NegateObject
        if not isinstance(v, NegateObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NegateObject`")
        else:
            match += 1
        # validate data type: AddObject
        if not isinstance(v, AddObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddObject`")
        else:
            match += 1
        # validate data type: MinusObject
        if not isinstance(v, MinusObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MinusObject`")
        else:
            match += 1
        # validate data type: MultiplyObject
        if not isinstance(v, MultiplyObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MultiplyObject`")
        else:
            match += 1
        # validate data type: DivideObject
        if not isinstance(v, DivideObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DivideObject`")
        else:
            match += 1
        # validate data type: ValueOfChoiceObject
        if not isinstance(v, ValueOfChoiceObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ValueOfChoiceObject`")
        else:
            match += 1
        # validate data type: TimeInterval
        if not isinstance(v, TimeInterval):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TimeInterval`")
        else:
            match += 1
        # validate data type: UseValue
        if not isinstance(v, UseValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UseValue`")
        else:
            match += 1
        # validate data type: IfValueObject
        if not isinstance(v, IfValueObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IfValueObject`")
        else:
            match += 1
        # validate data type: LabelRef
        if not isinstance(v, LabelRef):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LabelRef`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ValueObject with oneOf schemas: AddObject, DivideObject, IfValueObject, LabelRef, MinusObject, MultiplyObject, NegateObject, TimeInterval, TokenInAccountObject, UseValue, ValueOfChoiceObject, int. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ValueObject with oneOf schemas: AddObject, DivideObject, IfValueObject, LabelRef, MinusObject, MultiplyObject, NegateObject, TimeInterval, TokenInAccountObject, UseValue, ValueOfChoiceObject, int. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> ValueObject:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> ValueObject:
        """Returns the object represented by the json string"""
        instance = ValueObject.construct()
        error_messages = []
        match = 0

        # deserialize data into TokenInAccountObject
        try:
            instance.actual_instance = TokenInAccountObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into int
        try:
            # validation
            instance.oneof_schema_2_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_2_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NegateObject
        try:
            instance.actual_instance = NegateObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddObject
        try:
            instance.actual_instance = AddObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MinusObject
        try:
            instance.actual_instance = MinusObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MultiplyObject
        try:
            instance.actual_instance = MultiplyObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DivideObject
        try:
            instance.actual_instance = DivideObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ValueOfChoiceObject
        try:
            instance.actual_instance = ValueOfChoiceObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TimeInterval
        try:
            instance.actual_instance = TimeInterval.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UseValue
        try:
            instance.actual_instance = UseValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IfValueObject
        try:
            instance.actual_instance = IfValueObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LabelRef
        try:
            instance.actual_instance = LabelRef.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ValueObject with oneOf schemas: AddObject, DivideObject, IfValueObject, LabelRef, MinusObject, MultiplyObject, NegateObject, TimeInterval, TokenInAccountObject, UseValue, ValueOfChoiceObject, int. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ValueObject with oneOf schemas: AddObject, DivideObject, IfValueObject, LabelRef, MinusObject, MultiplyObject, NegateObject, TimeInterval, TokenInAccountObject, UseValue, ValueOfChoiceObject, int. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

from openapi_client.models.add_object import AddObject
from openapi_client.models.divide_object import DivideObject
from openapi_client.models.if_value_object import IfValueObject
from openapi_client.models.minus_object import MinusObject
from openapi_client.models.multiply_object import MultiplyObject
from openapi_client.models.negate_object import NegateObject
ValueObject.update_forward_refs()

