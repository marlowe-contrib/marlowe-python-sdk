# coding: utf-8

"""
    Marlowe Runtime REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from openapi_client.models.block_header import BlockHeader
from openapi_client.models.marlowe_version import MarloweVersion
from openapi_client.models.tx_status import TxStatus
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ContractHeader(BaseModel):
    """
    ContractHeader
    """ # noqa: E501
    block: Optional[BlockHeader] = None
    continuations: Optional[StrictStr] = None
    contract_id: Annotated[str, Field(strict=True)] = Field(description="A reference to a transaction output with a transaction ID and index.", alias="contractId")
    metadata: Dict[str, Any]
    role_token_minting_policy_id: Annotated[str, Field(strict=True)] = Field(description="The hex-encoded minting policy ID for a native Cardano token", alias="roleTokenMintingPolicyId")
    status: TxStatus
    tags: Dict[str, Any]
    version: MarloweVersion
    __properties: ClassVar[List[str]] = ["block", "continuations", "contractId", "metadata", "roleTokenMintingPolicyId", "status", "tags", "version"]

    @field_validator('contract_id')
    def contract_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-fA-F0-9]{64}#[0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-fA-F0-9]{64}#[0-9]+$/")
        return value

    @field_validator('role_token_minting_policy_id')
    def role_token_minting_policy_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-fA-F0-9]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-fA-F0-9]*$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ContractHeader from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of block
        if self.block:
            _dict['block'] = self.block.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ContractHeader from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "block": BlockHeader.from_dict(obj.get("block")) if obj.get("block") is not None else None,
            "continuations": obj.get("continuations"),
            "contractId": obj.get("contractId"),
            "metadata": obj.get("metadata"),
            "roleTokenMintingPolicyId": obj.get("roleTokenMintingPolicyId"),
            "status": obj.get("status"),
            "tags": obj.get("tags"),
            "version": obj.get("version")
        })
        return _obj


