# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from openapi_client.models.contract import Contract
from openapi_client.models.marlowe_state import MarloweState
from openapi_client.models.transaction_input import TransactionInput
from openapi_client.models.transaction_output import TransactionOutput

class Transaction(BaseModel):
    """
    Information about a Marlowe transaction.  # noqa: E501
    """
    contract: Contract = Field(...)
    input: TransactionInput = Field(...)
    output: TransactionOutput = Field(...)
    state: MarloweState = Field(...)
    __properties = ["contract", "input", "output", "state"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Transaction:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict['input'] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output
        if self.output:
            _dict['output'] = self.output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Transaction:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Transaction.parse_obj(obj)

        _obj = Transaction.parse_obj({
            "contract": Contract.from_dict(obj.get("contract")) if obj.get("contract") is not None else None,
            "input": TransactionInput.from_dict(obj.get("input")) if obj.get("input") is not None else None,
            "output": TransactionOutput.from_dict(obj.get("output")) if obj.get("output") is not None else None,
            "state": MarloweState.from_dict(obj.get("state")) if obj.get("state") is not None else None
        })
        return _obj


