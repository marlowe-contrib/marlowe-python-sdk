# coding: utf-8

"""
    Marlowe Runtime REST API

    REST API for Marlowe Runtime

    The version of the OpenAPI document: 0.0.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from openapi_client.models.close import Close
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

CONTRACT_ONE_OF_SCHEMAS = ["Close", "Let", "ModelAssert", "ModelIf", "Pay", "When"]

class Contract(BaseModel):
    """
    Contract terms specified in Marlowe
    """
    # data type: Close
    oneof_schema_1_validator: Optional[Close] = None
    # data type: Pay
    oneof_schema_2_validator: Optional[Pay] = None
    # data type: ModelIf
    oneof_schema_3_validator: Optional[ModelIf] = None
    # data type: When
    oneof_schema_4_validator: Optional[When] = None
    # data type: Let
    oneof_schema_5_validator: Optional[Let] = None
    # data type: ModelAssert
    oneof_schema_6_validator: Optional[ModelAssert] = None
    if TYPE_CHECKING:
        actual_instance: Union[Close, Let, ModelAssert, ModelIf, Pay, When]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(CONTRACT_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = Contract.construct()
        error_messages = []
        match = 0
        # validate data type: Close
        if not isinstance(v, Close):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Close`")
        else:
            match += 1
        # validate data type: Pay
        if not isinstance(v, Pay):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Pay`")
        else:
            match += 1
        # validate data type: ModelIf
        if not isinstance(v, ModelIf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ModelIf`")
        else:
            match += 1
        # validate data type: When
        if not isinstance(v, When):
            error_messages.append(f"Error! Input type `{type(v)}` is not `When`")
        else:
            match += 1
        # validate data type: Let
        if not isinstance(v, Let):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Let`")
        else:
            match += 1
        # validate data type: ModelAssert
        if not isinstance(v, ModelAssert):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ModelAssert`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in Contract with oneOf schemas: Close, Let, ModelAssert, ModelIf, Pay, When. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in Contract with oneOf schemas: Close, Let, ModelAssert, ModelIf, Pay, When. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Contract:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Contract:
        """Returns the object represented by the json string"""
        instance = Contract.construct()
        error_messages = []
        match = 0

        # deserialize data into Close
        try:
            instance.actual_instance = Close.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Pay
        try:
            instance.actual_instance = Pay.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ModelIf
        try:
            instance.actual_instance = ModelIf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into When
        try:
            instance.actual_instance = When.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Let
        try:
            instance.actual_instance = Let.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ModelAssert
        try:
            instance.actual_instance = ModelAssert.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into Contract with oneOf schemas: Close, Let, ModelAssert, ModelIf, Pay, When. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Contract with oneOf schemas: Close, Let, ModelAssert, ModelIf, Pay, When. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

from openapi_client.models.let import Let
from openapi_client.models.model_assert import ModelAssert
from openapi_client.models.model_if import ModelIf
from openapi_client.models.pay import Pay
from openapi_client.models.when import When
Contract.update_forward_refs()

