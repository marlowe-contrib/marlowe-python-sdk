# coding: utf-8

"""
    Marlowe Runtime REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictBool, StrictInt
from pydantic import Field
from openapi_client.models.party import Party
from openapi_client.models.token import Token
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CanDeposit(BaseModel):
    """
    Deposit Input that can be applied for a given contract
    """ # noqa: E501
    can_deposit: StrictInt
    case_index: StrictInt = Field(description="Index of a \"Case Action\" in a \"When\"")
    into_account: Party
    is_merkleized_continuation: StrictBool = Field(description="Indicates if a given contract continuation is merkleized")
    of_token: Token
    party: Party
    __properties: ClassVar[List[str]] = ["can_deposit", "case_index", "into_account", "is_merkleized_continuation", "of_token", "party"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CanDeposit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of into_account
        if self.into_account:
            _dict['into_account'] = self.into_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of of_token
        if self.of_token:
            _dict['of_token'] = self.of_token.to_dict()
        # override the default output from pydantic by calling `to_dict()` of party
        if self.party:
            _dict['party'] = self.party.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CanDeposit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "can_deposit": obj.get("can_deposit"),
            "case_index": obj.get("case_index"),
            "into_account": Party.from_dict(obj.get("into_account")) if obj.get("into_account") is not None else None,
            "is_merkleized_continuation": obj.get("is_merkleized_continuation"),
            "of_token": Token.from_dict(obj.get("of_token")) if obj.get("of_token") is not None else None,
            "party": Party.from_dict(obj.get("party")) if obj.get("party") is not None else None
        })
        return _obj


