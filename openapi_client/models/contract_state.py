# coding: utf-8

"""
    Marlowe Runtime REST API

    REST API for Marlowe Runtime

    The version of the OpenAPI document: 0.0.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from openapi_client.models.assets import Assets
from openapi_client.models.block_header import BlockHeader
from openapi_client.models.contract import Contract
from openapi_client.models.marlowe_state import MarloweState
from openapi_client.models.marlowe_version import MarloweVersion
from openapi_client.models.metadata import Metadata
from openapi_client.models.payout import Payout
from openapi_client.models.text_envelope import TextEnvelope
from openapi_client.models.tx_status import TxStatus

class ContractState(BaseModel):
    """
    ContractState
    """
    assets: Assets = Field(...)
    block: Optional[BlockHeader] = None
    continuations: Optional[StrictStr] = None
    contract_id: constr(strict=True) = Field(..., alias="contractId", description="A reference to a transaction output with a transaction ID and index.")
    current_contract: Optional[Contract] = Field(None, alias="currentContract")
    initial_contract: Contract = Field(..., alias="initialContract")
    metadata: Dict[str, Metadata] = Field(...)
    role_token_minting_policy_id: constr(strict=True) = Field(..., alias="roleTokenMintingPolicyId", description="The hex-encoded minting policy ID for a native Cardano token")
    state: Optional[MarloweState] = None
    status: TxStatus = Field(...)
    tags: Dict[str, Metadata] = Field(...)
    tx_body: Optional[TextEnvelope] = Field(None, alias="txBody")
    unclaimed_payouts: conlist(Payout) = Field(..., alias="unclaimedPayouts")
    utxo: Optional[constr(strict=True)] = Field(None, description="A reference to a transaction output with a transaction ID and index.")
    version: MarloweVersion = Field(...)
    __properties = ["assets", "block", "continuations", "contractId", "currentContract", "initialContract", "metadata", "roleTokenMintingPolicyId", "state", "status", "tags", "txBody", "unclaimedPayouts", "utxo", "version"]

    @validator('contract_id')
    def contract_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-fA-F0-9]{64}#[0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-fA-F0-9]{64}#[0-9]+$/")
        return value

    @validator('role_token_minting_policy_id')
    def role_token_minting_policy_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-fA-F0-9]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-fA-F0-9]*$/")
        return value

    @validator('utxo')
    def utxo_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-fA-F0-9]{64}#[0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-fA-F0-9]{64}#[0-9]+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ContractState:
        """Create an instance of ContractState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of assets
        if self.assets:
            _dict['assets'] = self.assets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of block
        if self.block:
            _dict['block'] = self.block.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_contract
        if self.current_contract:
            _dict['currentContract'] = self.current_contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initial_contract
        if self.initial_contract:
            _dict['initialContract'] = self.initial_contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in metadata (dict)
        _field_dict = {}
        if self.metadata:
            for _key in self.metadata:
                if self.metadata[_key]:
                    _field_dict[_key] = self.metadata[_key].to_dict()
            _dict['metadata'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in tags (dict)
        _field_dict = {}
        if self.tags:
            for _key in self.tags:
                if self.tags[_key]:
                    _field_dict[_key] = self.tags[_key].to_dict()
            _dict['tags'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of tx_body
        if self.tx_body:
            _dict['txBody'] = self.tx_body.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in unclaimed_payouts (list)
        _items = []
        if self.unclaimed_payouts:
            for _item in self.unclaimed_payouts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['unclaimedPayouts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ContractState:
        """Create an instance of ContractState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ContractState.parse_obj(obj)

        _obj = ContractState.parse_obj({
            "assets": Assets.from_dict(obj.get("assets")) if obj.get("assets") is not None else None,
            "block": BlockHeader.from_dict(obj.get("block")) if obj.get("block") is not None else None,
            "continuations": obj.get("continuations"),
            "contract_id": obj.get("contractId"),
            "current_contract": Contract.from_dict(obj.get("currentContract")) if obj.get("currentContract") is not None else None,
            "initial_contract": Contract.from_dict(obj.get("initialContract")) if obj.get("initialContract") is not None else None,
            "metadata": dict(
                (_k, Metadata.from_dict(_v))
                for _k, _v in obj.get("metadata").items()
            )
            if obj.get("metadata") is not None
            else None,
            "role_token_minting_policy_id": obj.get("roleTokenMintingPolicyId"),
            "state": MarloweState.from_dict(obj.get("state")) if obj.get("state") is not None else None,
            "status": obj.get("status"),
            "tags": dict(
                (_k, Metadata.from_dict(_v))
                for _k, _v in obj.get("tags").items()
            )
            if obj.get("tags") is not None
            else None,
            "tx_body": TextEnvelope.from_dict(obj.get("txBody")) if obj.get("txBody") is not None else None,
            "unclaimed_payouts": [Payout.from_dict(_item) for _item in obj.get("unclaimedPayouts")] if obj.get("unclaimedPayouts") is not None else None,
            "utxo": obj.get("utxo"),
            "version": obj.get("version")
        })
        return _obj


