# coding: utf-8

"""
    Marlowe Runtime REST API

    REST API for Marlowe Runtime

    The version of the OpenAPI document: 0.0.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, ValidationError, validator
from openapi_client.models.choose_for_object import ChooseForObject
from openapi_client.models.label_ref import LabelRef
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

OBSERVATIONOBJECT_ONE_OF_SCHEMAS = ["AndObject", "ChooseForObject", "EqualObject", "GreaterObject", "GreaterOrEqualObject", "LabelRef", "LesserObject", "LesserOrEqualObject", "NotObject", "OrObject", "bool"]

class ObservationObject(BaseModel):
    """
    A time-varying expression that evaluates to an integer
    """
    # data type: bool
    oneof_schema_1_validator: Optional[StrictBool] = None
    # data type: AndObject
    oneof_schema_2_validator: Optional[AndObject] = None
    # data type: OrObject
    oneof_schema_3_validator: Optional[OrObject] = None
    # data type: NotObject
    oneof_schema_4_validator: Optional[NotObject] = None
    # data type: ChooseForObject
    oneof_schema_5_validator: Optional[ChooseForObject] = None
    # data type: GreaterOrEqualObject
    oneof_schema_6_validator: Optional[GreaterOrEqualObject] = None
    # data type: GreaterObject
    oneof_schema_7_validator: Optional[GreaterObject] = None
    # data type: LesserObject
    oneof_schema_8_validator: Optional[LesserObject] = None
    # data type: LesserOrEqualObject
    oneof_schema_9_validator: Optional[LesserOrEqualObject] = None
    # data type: EqualObject
    oneof_schema_10_validator: Optional[EqualObject] = None
    # data type: LabelRef
    oneof_schema_11_validator: Optional[LabelRef] = None
    if TYPE_CHECKING:
        actual_instance: Union[AndObject, ChooseForObject, EqualObject, GreaterObject, GreaterOrEqualObject, LabelRef, LesserObject, LesserOrEqualObject, NotObject, OrObject, bool]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(OBSERVATIONOBJECT_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ObservationObject.construct()
        error_messages = []
        match = 0
        # validate data type: bool
        try:
            instance.oneof_schema_1_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: AndObject
        if not isinstance(v, AndObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AndObject`")
        else:
            match += 1
        # validate data type: OrObject
        if not isinstance(v, OrObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OrObject`")
        else:
            match += 1
        # validate data type: NotObject
        if not isinstance(v, NotObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotObject`")
        else:
            match += 1
        # validate data type: ChooseForObject
        if not isinstance(v, ChooseForObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChooseForObject`")
        else:
            match += 1
        # validate data type: GreaterOrEqualObject
        if not isinstance(v, GreaterOrEqualObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GreaterOrEqualObject`")
        else:
            match += 1
        # validate data type: GreaterObject
        if not isinstance(v, GreaterObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GreaterObject`")
        else:
            match += 1
        # validate data type: LesserObject
        if not isinstance(v, LesserObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LesserObject`")
        else:
            match += 1
        # validate data type: LesserOrEqualObject
        if not isinstance(v, LesserOrEqualObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LesserOrEqualObject`")
        else:
            match += 1
        # validate data type: EqualObject
        if not isinstance(v, EqualObject):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EqualObject`")
        else:
            match += 1
        # validate data type: LabelRef
        if not isinstance(v, LabelRef):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LabelRef`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ObservationObject with oneOf schemas: AndObject, ChooseForObject, EqualObject, GreaterObject, GreaterOrEqualObject, LabelRef, LesserObject, LesserOrEqualObject, NotObject, OrObject, bool. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ObservationObject with oneOf schemas: AndObject, ChooseForObject, EqualObject, GreaterObject, GreaterOrEqualObject, LabelRef, LesserObject, LesserOrEqualObject, NotObject, OrObject, bool. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> ObservationObject:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> ObservationObject:
        """Returns the object represented by the json string"""
        instance = ObservationObject.construct()
        error_messages = []
        match = 0

        # deserialize data into bool
        try:
            # validation
            instance.oneof_schema_1_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_1_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AndObject
        try:
            instance.actual_instance = AndObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OrObject
        try:
            instance.actual_instance = OrObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotObject
        try:
            instance.actual_instance = NotObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChooseForObject
        try:
            instance.actual_instance = ChooseForObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GreaterOrEqualObject
        try:
            instance.actual_instance = GreaterOrEqualObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GreaterObject
        try:
            instance.actual_instance = GreaterObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LesserObject
        try:
            instance.actual_instance = LesserObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LesserOrEqualObject
        try:
            instance.actual_instance = LesserOrEqualObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EqualObject
        try:
            instance.actual_instance = EqualObject.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LabelRef
        try:
            instance.actual_instance = LabelRef.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ObservationObject with oneOf schemas: AndObject, ChooseForObject, EqualObject, GreaterObject, GreaterOrEqualObject, LabelRef, LesserObject, LesserOrEqualObject, NotObject, OrObject, bool. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ObservationObject with oneOf schemas: AndObject, ChooseForObject, EqualObject, GreaterObject, GreaterOrEqualObject, LabelRef, LesserObject, LesserOrEqualObject, NotObject, OrObject, bool. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

from openapi_client.models.and_object import AndObject
from openapi_client.models.equal_object import EqualObject
from openapi_client.models.greater_object import GreaterObject
from openapi_client.models.greater_or_equal_object import GreaterOrEqualObject
from openapi_client.models.lesser_object import LesserObject
from openapi_client.models.lesser_or_equal_object import LesserOrEqualObject
from openapi_client.models.not_object import NotObject
from openapi_client.models.or_object import OrObject
ObservationObject.update_forward_refs()

