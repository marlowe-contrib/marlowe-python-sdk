# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint
from openapi_client.models.choice_id import ChoiceId
from openapi_client.models.ex_budget import ExBudget
from openapi_client.models.party import Party
from openapi_client.models.plutus_address import PlutusAddress
from openapi_client.models.token import Token
from openapi_client.models.transaction import Transaction
from openapi_client.models.transaction_warning import TransactionWarning

class SafetyError(BaseModel):
    """
    Information about the safety of a Marlowe contract and its state.  # noqa: E501
    """
    account_id: Optional[Party] = Field(None, alias="account-id")
    address: Optional[PlutusAddress] = None
    bytes: Optional[conint(strict=True, ge=0)] = None
    choice_id: Optional[ChoiceId] = Field(None, alias="choice-id")
    cost: Optional[ExBudget] = None
    currency_symbol: Optional[StrictStr] = Field(None, alias="currency-symbol")
    detail: StrictStr = Field(...)
    error: StrictStr = Field(...)
    fatal: StrictBool = Field(...)
    hash: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    role_name: Optional[StrictStr] = Field(None, alias="role-name")
    token: Optional[Token] = None
    token_name: Optional[StrictStr] = Field(None, alias="token-name")
    transaction: Optional[Transaction] = None
    value_id: Optional[StrictStr] = Field(None, alias="value-id")
    warning: Optional[TransactionWarning] = None
    __properties = ["account-id", "address", "bytes", "choice-id", "cost", "currency-symbol", "detail", "error", "fatal", "hash", "message", "role-name", "token", "token-name", "transaction", "value-id", "warning"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SafetyError:
        """Create an instance of SafetyError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of account_id
        if self.account_id:
            _dict['account-id'] = self.account_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of choice_id
        if self.choice_id:
            _dict['choice-id'] = self.choice_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cost
        if self.cost:
            _dict['cost'] = self.cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token
        if self.token:
            _dict['token'] = self.token.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction
        if self.transaction:
            _dict['transaction'] = self.transaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warning
        if self.warning:
            _dict['warning'] = self.warning.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SafetyError:
        """Create an instance of SafetyError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SafetyError.parse_obj(obj)

        _obj = SafetyError.parse_obj({
            "account_id": Party.from_dict(obj.get("account-id")) if obj.get("account-id") is not None else None,
            "address": PlutusAddress.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "bytes": obj.get("bytes"),
            "choice_id": ChoiceId.from_dict(obj.get("choice-id")) if obj.get("choice-id") is not None else None,
            "cost": ExBudget.from_dict(obj.get("cost")) if obj.get("cost") is not None else None,
            "currency_symbol": obj.get("currency-symbol"),
            "detail": obj.get("detail"),
            "error": obj.get("error"),
            "fatal": obj.get("fatal"),
            "hash": obj.get("hash"),
            "message": obj.get("message"),
            "role_name": obj.get("role-name"),
            "token": Token.from_dict(obj.get("token")) if obj.get("token") is not None else None,
            "token_name": obj.get("token-name"),
            "transaction": Transaction.from_dict(obj.get("transaction")) if obj.get("transaction") is not None else None,
            "value_id": obj.get("value-id"),
            "warning": TransactionWarning.from_dict(obj.get("warning")) if obj.get("warning") is not None else None
        })
        return _obj


