# coding: utf-8

"""
    Marlowe Runtime REST API

    REST API for Marlowe Runtime

    The version of the OpenAPI document: 0.0.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr, conint
from openapi_client.models.marlowe_version import MarloweVersion
from openapi_client.models.metadata import Metadata
from openapi_client.models.post_contracts_request_contract import PostContractsRequestContract
from openapi_client.models.roles_config import RolesConfig

class PostContractsRequest(BaseModel):
    """
    PostContractsRequest
    """
    contract: PostContractsRequestContract = Field(...)
    metadata: Dict[str, Metadata] = Field(...)
    min_utx_o_deposit: Optional[conint(strict=True, le=9223372036854775807, ge=0)] = Field(None, alias="minUTxODeposit")
    roles: Optional[RolesConfig] = None
    tags: Dict[str, Metadata] = Field(...)
    thread_token_name: Optional[StrictStr] = Field(None, alias="threadTokenName")
    version: MarloweVersion = Field(...)
    __properties = ["contract", "metadata", "minUTxODeposit", "roles", "tags", "threadTokenName", "version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostContractsRequest:
        """Create an instance of PostContractsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        print("NASHE {}, self: {}".format(_dict, self))
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in metadata (dict)
        _field_dict = {}
        if self.metadata:
            for _key in self.metadata:
                if self.metadata[_key]:
                    _field_dict[_key] = self.metadata[_key].to_dict()
            _dict['metadata'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of roles
        if self.roles:
            _dict['roles'] = self.roles.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in tags (dict)
        _field_dict = {}
        if self.tags:
            for _key in self.tags:
                if self.tags[_key]:
                    _field_dict[_key] = self.tags[_key].to_dict()
            _dict['tags'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostContractsRequest:
        """Create an instance of PostContractsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostContractsRequest.parse_obj(obj)

        _obj = PostContractsRequest.parse_obj({
            "contract": PostContractsRequestContract.from_dict(obj.get("contract")) if obj.get("contract") is not None else None,
            "metadata": dict(
                (_k, Metadata.from_dict(_v))
                for _k, _v in obj.get("metadata").items()
            )
            if obj.get("metadata") is not None
            else None,
            "min_utx_o_deposit": obj.get("minUTxODeposit"),
            "roles": RolesConfig.from_dict(obj.get("roles")) if obj.get("roles") is not None else None,
            "tags": dict(
                (_k, Metadata.from_dict(_v))
                for _k, _v in obj.get("tags").items()
            )
            if obj.get("tags") is not None
            else None,
            "thread_token_name": obj.get("threadTokenName"),
            "version": obj.get("version")
        })
        return _obj


