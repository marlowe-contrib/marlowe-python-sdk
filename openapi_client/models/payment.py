# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt
from openapi_client.models.party import Party
from openapi_client.models.payee import Payee
from openapi_client.models.token import Token

class Payment(BaseModel):
    """
    A Marlowe payment.  # noqa: E501
    """
    amount: StrictInt = Field(...)
    payment_from: Party = Field(...)
    to: Payee = Field(...)
    token: Token = Field(...)
    __properties = ["amount", "payment_from", "to", "token"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Payment:
        """Create an instance of Payment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payment_from
        if self.payment_from:
            _dict['payment_from'] = self.payment_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to
        if self.to:
            _dict['to'] = self.to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token
        if self.token:
            _dict['token'] = self.token.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Payment:
        """Create an instance of Payment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Payment.parse_obj(obj)

        _obj = Payment.parse_obj({
            "amount": obj.get("amount"),
            "payment_from": Party.from_dict(obj.get("payment_from")) if obj.get("payment_from") is not None else None,
            "to": Payee.from_dict(obj.get("to")) if obj.get("to") is not None else None,
            "token": Token.from_dict(obj.get("token")) if obj.get("token") is not None else None
        })
        return _obj


