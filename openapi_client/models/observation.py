# coding: utf-8

"""
    Marlowe Runtime REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, ValidationError, field_validator
from openapi_client.models.observation_one_of3 import ObservationOneOf3
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

OBSERVATION_ONE_OF_SCHEMAS = ["ObservationOneOf", "ObservationOneOf1", "ObservationOneOf2", "ObservationOneOf3", "ObservationOneOf4", "ObservationOneOf5", "ObservationOneOf6", "ObservationOneOf7", "ObservationOneOf8", "bool"]

class Observation(BaseModel):
    """
    A time-varying expression that evaluates to an integer
    """
    # data type: bool
    oneof_schema_1_validator: Optional[StrictBool] = None
    # data type: ObservationOneOf
    oneof_schema_2_validator: Optional[ObservationOneOf] = None
    # data type: ObservationOneOf1
    oneof_schema_3_validator: Optional[ObservationOneOf1] = None
    # data type: ObservationOneOf2
    oneof_schema_4_validator: Optional[ObservationOneOf2] = None
    # data type: ObservationOneOf3
    oneof_schema_5_validator: Optional[ObservationOneOf3] = None
    # data type: ObservationOneOf4
    oneof_schema_6_validator: Optional[ObservationOneOf4] = None
    # data type: ObservationOneOf5
    oneof_schema_7_validator: Optional[ObservationOneOf5] = None
    # data type: ObservationOneOf6
    oneof_schema_8_validator: Optional[ObservationOneOf6] = None
    # data type: ObservationOneOf7
    oneof_schema_9_validator: Optional[ObservationOneOf7] = None
    # data type: ObservationOneOf8
    oneof_schema_10_validator: Optional[ObservationOneOf8] = None
    actual_instance: Optional[Union[ObservationOneOf, ObservationOneOf1, ObservationOneOf2, ObservationOneOf3, ObservationOneOf4, ObservationOneOf5, ObservationOneOf6, ObservationOneOf7, ObservationOneOf8, bool]] = None
    one_of_schemas: List[str] = Literal["ObservationOneOf", "ObservationOneOf1", "ObservationOneOf2", "ObservationOneOf3", "ObservationOneOf4", "ObservationOneOf5", "ObservationOneOf6", "ObservationOneOf7", "ObservationOneOf8", "bool"]

    model_config = {
        "validate_assignment": True
    }


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = Observation.model_construct()
        error_messages = []
        match = 0
        # validate data type: bool
        try:
            instance.oneof_schema_1_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: ObservationOneOf
        if not isinstance(v, ObservationOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationOneOf`")
        else:
            match += 1
        # validate data type: ObservationOneOf1
        if not isinstance(v, ObservationOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationOneOf1`")
        else:
            match += 1
        # validate data type: ObservationOneOf2
        if not isinstance(v, ObservationOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationOneOf2`")
        else:
            match += 1
        # validate data type: ObservationOneOf3
        if not isinstance(v, ObservationOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationOneOf3`")
        else:
            match += 1
        # validate data type: ObservationOneOf4
        if not isinstance(v, ObservationOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationOneOf4`")
        else:
            match += 1
        # validate data type: ObservationOneOf5
        if not isinstance(v, ObservationOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationOneOf5`")
        else:
            match += 1
        # validate data type: ObservationOneOf6
        if not isinstance(v, ObservationOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationOneOf6`")
        else:
            match += 1
        # validate data type: ObservationOneOf7
        if not isinstance(v, ObservationOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationOneOf7`")
        else:
            match += 1
        # validate data type: ObservationOneOf8
        if not isinstance(v, ObservationOneOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationOneOf8`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in Observation with oneOf schemas: ObservationOneOf, ObservationOneOf1, ObservationOneOf2, ObservationOneOf3, ObservationOneOf4, ObservationOneOf5, ObservationOneOf6, ObservationOneOf7, ObservationOneOf8, bool. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in Observation with oneOf schemas: ObservationOneOf, ObservationOneOf1, ObservationOneOf2, ObservationOneOf3, ObservationOneOf4, ObservationOneOf5, ObservationOneOf6, ObservationOneOf7, ObservationOneOf8, bool. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into bool
        try:
            # validation
            instance.oneof_schema_1_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_1_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationOneOf
        try:
            instance.actual_instance = ObservationOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationOneOf1
        try:
            instance.actual_instance = ObservationOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationOneOf2
        try:
            instance.actual_instance = ObservationOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationOneOf3
        try:
            instance.actual_instance = ObservationOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationOneOf4
        try:
            instance.actual_instance = ObservationOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationOneOf5
        try:
            instance.actual_instance = ObservationOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationOneOf6
        try:
            instance.actual_instance = ObservationOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationOneOf7
        try:
            instance.actual_instance = ObservationOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationOneOf8
        try:
            instance.actual_instance = ObservationOneOf8.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into Observation with oneOf schemas: ObservationOneOf, ObservationOneOf1, ObservationOneOf2, ObservationOneOf3, ObservationOneOf4, ObservationOneOf5, ObservationOneOf6, ObservationOneOf7, ObservationOneOf8, bool. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Observation with oneOf schemas: ObservationOneOf, ObservationOneOf1, ObservationOneOf2, ObservationOneOf3, ObservationOneOf4, ObservationOneOf5, ObservationOneOf6, ObservationOneOf7, ObservationOneOf8, bool. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())

from openapi_client.models.observation_one_of import ObservationOneOf
from openapi_client.models.observation_one_of1 import ObservationOneOf1
from openapi_client.models.observation_one_of2 import ObservationOneOf2
from openapi_client.models.observation_one_of4 import ObservationOneOf4
from openapi_client.models.observation_one_of5 import ObservationOneOf5
from openapi_client.models.observation_one_of6 import ObservationOneOf6
from openapi_client.models.observation_one_of7 import ObservationOneOf7
from openapi_client.models.observation_one_of8 import ObservationOneOf8
# TODO: Rewrite to not use raise_errors
Observation.model_rebuild(raise_errors=False)

