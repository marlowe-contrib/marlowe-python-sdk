# coding: utf-8

"""
    Marlowe Runtime REST API

    REST API for Marlowe Runtime

    The version of the OpenAPI document: 0.0.5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, ValidationError, validator
from openapi_client.models.choose_for import ChooseFor
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

OBSERVATION_ONE_OF_SCHEMAS = ["ChooseFor", "Equal", "Greater", "GreaterOrEqual", "Lesser", "LesserOrEqual", "ModelAnd", "ModelNot", "ModelOr", "bool"]

class Observation(BaseModel):
    """
    A time-varying expression that evaluates to an integer
    """
    # data type: bool
    oneof_schema_1_validator: Optional[StrictBool] = None
    # data type: ModelAnd
    oneof_schema_2_validator: Optional[ModelAnd] = None
    # data type: ModelOr
    oneof_schema_3_validator: Optional[ModelOr] = None
    # data type: ModelNot
    oneof_schema_4_validator: Optional[ModelNot] = None
    # data type: ChooseFor
    oneof_schema_5_validator: Optional[ChooseFor] = None
    # data type: GreaterOrEqual
    oneof_schema_6_validator: Optional[GreaterOrEqual] = None
    # data type: Greater
    oneof_schema_7_validator: Optional[Greater] = None
    # data type: Lesser
    oneof_schema_8_validator: Optional[Lesser] = None
    # data type: LesserOrEqual
    oneof_schema_9_validator: Optional[LesserOrEqual] = None
    # data type: Equal
    oneof_schema_10_validator: Optional[Equal] = None
    if TYPE_CHECKING:
        actual_instance: Union[ChooseFor, Equal, Greater, GreaterOrEqual, Lesser, LesserOrEqual, ModelAnd, ModelNot, ModelOr, bool]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(OBSERVATION_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = Observation.construct()
        error_messages = []
        match = 0
        # validate data type: bool
        try:
            instance.oneof_schema_1_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: ModelAnd
        if not isinstance(v, ModelAnd):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ModelAnd`")
        else:
            match += 1
        # validate data type: ModelOr
        if not isinstance(v, ModelOr):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ModelOr`")
        else:
            match += 1
        # validate data type: ModelNot
        if not isinstance(v, ModelNot):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ModelNot`")
        else:
            match += 1
        # validate data type: ChooseFor
        if not isinstance(v, ChooseFor):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChooseFor`")
        else:
            match += 1
        # validate data type: GreaterOrEqual
        if not isinstance(v, GreaterOrEqual):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GreaterOrEqual`")
        else:
            match += 1
        # validate data type: Greater
        if not isinstance(v, Greater):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Greater`")
        else:
            match += 1
        # validate data type: Lesser
        if not isinstance(v, Lesser):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Lesser`")
        else:
            match += 1
        # validate data type: LesserOrEqual
        if not isinstance(v, LesserOrEqual):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LesserOrEqual`")
        else:
            match += 1
        # validate data type: Equal
        if not isinstance(v, Equal):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Equal`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in Observation with oneOf schemas: ChooseFor, Equal, Greater, GreaterOrEqual, Lesser, LesserOrEqual, ModelAnd, ModelNot, ModelOr, bool. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in Observation with oneOf schemas: ChooseFor, Equal, Greater, GreaterOrEqual, Lesser, LesserOrEqual, ModelAnd, ModelNot, ModelOr, bool. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Observation:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Observation:
        """Returns the object represented by the json string"""
        instance = Observation.construct()
        error_messages = []
        match = 0

        # deserialize data into bool
        try:
            # validation
            instance.oneof_schema_1_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_1_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ModelAnd
        try:
            instance.actual_instance = ModelAnd.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ModelOr
        try:
            instance.actual_instance = ModelOr.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ModelNot
        try:
            instance.actual_instance = ModelNot.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChooseFor
        try:
            instance.actual_instance = ChooseFor.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GreaterOrEqual
        try:
            instance.actual_instance = GreaterOrEqual.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Greater
        try:
            instance.actual_instance = Greater.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Lesser
        try:
            instance.actual_instance = Lesser.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LesserOrEqual
        try:
            instance.actual_instance = LesserOrEqual.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Equal
        try:
            instance.actual_instance = Equal.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into Observation with oneOf schemas: ChooseFor, Equal, Greater, GreaterOrEqual, Lesser, LesserOrEqual, ModelAnd, ModelNot, ModelOr, bool. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Observation with oneOf schemas: ChooseFor, Equal, Greater, GreaterOrEqual, Lesser, LesserOrEqual, ModelAnd, ModelNot, ModelOr, bool. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

from openapi_client.models.equal import Equal
from openapi_client.models.greater import Greater
from openapi_client.models.greater_or_equal import GreaterOrEqual
from openapi_client.models.lesser import Lesser
from openapi_client.models.lesser_or_equal import LesserOrEqual
from openapi_client.models.model_and import ModelAnd
from openapi_client.models.model_not import ModelNot
from openapi_client.models.model_or import ModelOr
Observation.update_forward_refs()

